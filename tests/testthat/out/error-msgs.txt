> error_txt_wrong_col_args()
[1] "Argument `column` has to be given as character variable or unquoted and may only contain 1 element."

> error_txt_key_set_force_false()
[1] "If you want to change the existing primary key for a table, set `force` == TRUE."

> error_txt_not_unique_key("Christmas", c("elves", "Rudolph", "mulled_wine"))
(`elves`, `Rudolph`, `mulled_wine`) not a unique key of `Christmas`.

> error_txt_table_not_in_dm(c("laziness", "daydreaming"), c("hard_work", "focus",
+   "overhours"))
Tables `laziness`, `daydreaming` not in `dm` object. Available table names: `hard_work`, `focus`, `overhours`

> error_txt_not_subset_of("playing", "game", "hunting", "game")
Column `game` of table `playing` contains values (see above) that are not present in column `game` of table `hunting`

> error_txt_sets_not_equal(c("A problem occurred",
+   "And another, even worse problem, occurred shortly after"))
[1] "A problem occurred\n  And another, even worse problem, occurred shortly after"

> error_txt_not_bijective("child_table_name", "fk_col_name")
1..1 cardinality (bijectivity) is not given: Column `fk_col_name` in table `child_table_name` contains duplicate values.

> error_txt_not_injective("child_table_name", "fk_col_name")
0..1 cardinality (injectivity from child table to parent table) is not given: Column `fk_col_name` in table `child_table_name` contains duplicate values.

> error_txt_ref_tbl_has_no_pk("parent_table")
ref_table `parent_table` needs a primary key first. Use `dm_enum_pk_candidates()` to find appropriate columns and `dm_add_pk()` to define a primary key.

> error_txt_is_not_fk("child_table_name", c("wrong_fk_colname", "and_one_more"),
+ "parent_table_name", c("actual_fk_colname", "and_one_more"))
The given combination of columns (`wrong_fk_colname`, `and_one_more`) is not a foreign key of table `child_table_name` with regards to ref_table `parent_table_name`. Foreign key columns are: (`actual_fk_colname`, `and_one_more`).

> error_txt_rm_fk_col_missing()
[1] "Parameter `column` has to be set. Pass `NULL` for removing all references."

> error_txt_last_col_missing()
[1] "The last color cannot be missing."

> error_txt_wrong_color(paste0("`", colors$dm, "` ", colors$nb))
[1] "Available color names are only: \n`default` (border),\n`blue_nb` (no border),\n`orange_nb` (no border),\n`yellow_nb` (no border),\n`green_nb` (no border),\n`dark_blue_nb` (no border),\n`light_grey_nb` (no border),\n`grey_nb` (no border),\n`blue` (border),\n`orange` (border),\n`yellow` (border),\n`green` (border),\n`dark_blue` (border),\n`light_grey` (border),\n`grey` (border)"

> error_txt_no_cycles()
[1] "Cycles in the relationship graph not yet supported."

> error_txt_tables_not_reachable_from_start()
All selected tables must be reachable from `start`.

> error_txt_wrong_col_names("table_name", c("col_1", "col_2"), c("col_one",
+   "col_2"))
[1] "Not all specified variables `col_one`, `col_2` are columns of `table_name`. Its columns are: \n`col_1`, `col_2`."

> error_txt_wrong_col_names("table_name", c("col_1", "col_2"), "col_one")
[1] "`col_one` is not a column of `table_name`. Its columns are: \n`col_1`, `col_2`."

> error_txt_dupl_new_id_col_name("tibbletable")
[1] "`new_id_column` can not have an identical name as one of the columns of `tibbletable`."

> error_txt_no_overwrite("fun")
`fun()` does not support the `overwrite` argument.

> error_txt_no_types()
[1] "`dm_copy_to()` does not support the `types` argument."

> error_txt_no_indexes()
[1] "`dm_copy_to()` does not support the `indexes` argument."

> error_txt_no_unique_indexes()
[1] "`dm_copy_to()` does not support the `unique_indexes` argument."

> error_txt_need_named_vec(c("activity", "income", "expenses", "loss_or_gain"))
[1] "Parameter `table_names` in `dm_copy_to()` needs to be a named vector whose names are the original table names (returned by e.g. `src_tbls()`): `activity`, `income`, `expenses`, `loss_or_gain`"

> error_src_not_db()
[1] "This does not work if the tables of the `dm` are not on a database."

> error_first_rm_fks("parent", c("child_1", "child_2"))
There are foreign keys pointing from table(s) `child_1`, `child_2` to table `parent`. First remove those or set `rm_referencing_fks = TRUE`.

> error_no_src_or_con()
[1] "Argument `src` needs to be a `src` or a `con` object."

> error_update_not_supported()
[1] "Updating `dm` objects not supported."

> error_only_possible_wo_filters("find_wisdom")
You cannot call `find_wisdom()` on a `dm` with filter conditions. Consider using `dm_apply_filters()` first.

> error_tables_not_neighbours("subjects", "king")
Tables `subjects` and `king` are not directly linked by a foreign key relation.

> error_only_parents()
[1] "When using `dm_join_to_tbl()` or `dm_flatten_to_tbl()` all join partners of table `start` have to be its direct neighbours. For 'flattening' with `left_join()`, `inner_join()` or `full_join()` use `dm_squash_to_tbl()` as an alternative."

> error_not_same_src()
[1] "Not all tables in the object share the same `src`"

> error_what_a_weird_object("monster")
Don't know how to determine table source for object of class `monster`

> error_not_same_src()
[1] "Not all tables in the object share the same `src`"

> error_squash_limited()
[1] "`dm_squash_to_tbl()` only supports join methods `left_join`, `inner_join`, `full_join`."

> error_apply_filters_first("join_tightly")
`dm_..._to_tbl()` with join method `join_tightly` generally wouldn't produce the correct result when filters are set. Please consider calling `dm_apply_filters()` first.

> error_no_flatten_with_nest_join()
[1] "`dm_..._to_tbl() can't be called with `join = nest_join`, because it doesn't make sense, cf. the help pages for these functions. Consider `join = left_join`"

> error_unique_table_names_or_table_names()
[1] "Can supply either `table_names` or `unique_table_names = TRUE`, not both."

> error_is_not_dm("blob")
Required class `dm` but instead is `blob`

> error_con_only_for_dbi()
[1] "A local `dm` doesn't have a DB connection"

> error_no_zoom_allowed()
[1] "`dm_zoom_to_tbl()` only works for unzoomed `dm`. Please use one of `dm_update_zoomed_tbl()`, `dm_insert_zoomed_tbl()` or `dm_zoom_out()` first."

> error_no_table_zoomed()
[1] "`dm_insert_zoomed_tbl()` only works for zoomed `dm`"

> error_table_needs_name()
[1] "The new table to insert with `dm_insert_zoomed_tbl()` must have a name"

> error_only_possible_wo_zoom("dm_zoom_to_tbl")
You cannot call `dm_zoom_to_tbl()` on a `zoomed_dm`. Consider using one of `dm_update_zoomed_tbl()`, `dm_insert_zoomed_tbl()` or `dm_zoom_out()` first.

> error_only_possible_w_zoom("dm_update_zoomed_tbl")
You cannot call `dm_update_zoomed_tbl()` on an unzoomed `dm`. Consider using `dm_zoom_to_tbl()` first.

> error_req_tbl_not_avail(c("dull", "boring", "common_knowledge"), c(
+   "fascinating", "interesting"))
Table(s) `fascinating`, `interesting` not available on `src`. Available tables are: `dull`, `boring`, `common_knowledge`.

> error_unnamed_table_list()
[1] "Table list in `new_dm()` needs to be named."

> error_need_unique_names("clone")
Each new table needs to have a unique name. Duplicate new name(s): `clone`.

> error_fk_not_tracked("hook", "eye")
The foreign key that existed between the originally zoomed table `hook` and `eye` got lost in transformations. Please explicitly provide the `by` argument.

> error_need_to_select_rhs_by("RHS", "by")
You need to select by-column `by` of RHS-table `RHS`.

> error_dm_invalid("it's ugly")
[1] "This `dm` is invalid, reason: it's ugly"

> error_no_table_provided()
[1] "Argument `table` for `pull_tbl.dm()` missing."

> error_table_not_zoomed("blur", c("focus_1", "focus_2"))
In `pull_tbl.zoomed_dm`: Table `blur` not zoomed, zoomed tables: `focus_1`, `focus_2`.

> error_not_pulling_multiple_zoomed()
[1] "If more than 1 zoomed table is available you need to specify argument `table` in `pull_tbl.zoomed_dm()`."

> error_txt_no_pk_in_separate_tbl("KEY", "DON")
A primary key column (here: `DON$KEY`) can not be among the selected columns for `dm_separate_table()`.

