% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dm.R
\name{dm}
\alias{dm}
\alias{dm_from_src}
\alias{new_dm}
\alias{validate_dm}
\alias{dm_get_src}
\alias{dm_get_con}
\alias{dm_get_tables}
\alias{dm_get_filter}
\alias{is_dm}
\alias{as_dm}
\title{Data model class}
\usage{
dm(..., .name_repair = c("check_unique", "unique", "universal", "minimal"))

dm_from_src(src = NULL, table_names = NULL)

new_dm(tables = list())

validate_dm(x)

dm_get_src(x)

dm_get_con(x)

dm_get_tables(x)

dm_get_filter(x)

is_dm(x)

as_dm(x)
}
\arguments{
\item{...}{Tables to add to the \code{dm} object.
If no names are provided, the tables
are auto-named.}

\item{.name_repair}{Options for name repair.
Forwarded as \code{repair} to \code{\link[vctrs:vec_as_names]{vctrs::vec_as_names()}}.}

\item{src}{A \pkg{dplyr} table source object.}

\item{table_names}{A character vector of the names of the tables to include.}

\item{tables}{A named list of the tables (tibble-objects, not names) .
to be included in the \code{dm} object.}

\item{x}{An object.}
}
\value{
For \code{dm()}, \code{dm_from_src()}, \code{new_dm()}, \code{as_dm()}: A \code{dm} object.

For \code{validate_dm()}: Returns the \code{dm}, invisibly, after finishing all checks.

For \code{dm_get_src()}: the \pkg{dplyr} source for a \code{dm} object.

For \code{dm_get_con()}: The \code{\link[DBI:DBIConnection-class]{DBI::DBIConnection}} for \code{dm} objects.

For \code{dm_get_tables()}: A named list with the tables constituting the \code{dm}.

For \code{dm_get_filter()}: A tibble with columns:
\itemize{
\item "table": table that was filtered,
\item "filter": the filter expression,
\item "zoomed": logical, does the filter condition relate to the zoomed table.
}

For \code{is_dm()}: Boolean, is this object a \code{dm}.
}
\description{
The \code{dm} class holds a list of tables and their relationships.
It is inspired by \href{https://github.com/bergant/datamodelr}{datamodelr},
and extends the idea by offering operations to access the data in the tables.

\code{dm()} creates a \code{dm} object from one or multiple \link{tbl} objects
(tibbles or lazy data objects).

\code{dm_from_src()} creates a \code{dm} from some or all tables in a \link{src}
(a database or an environment).

\code{new_dm()} is a low-level constructor that creates a new \code{dm} object.

If called without arguments, it will create an empty \code{dm}.

If called with arguments, no validation checks will be made to ascertain that
the inputs are of the expected class and internally consistent;
use \code{validate_dm()} to double-check the returned object.

\code{validate_dm()} checks the internal consistency of a \code{dm} object.

\code{dm_get_src()} returns the \pkg{dplyr} source for a \code{dm} object.
All tables in a \code{dm} object must be from the same source,
i.e. either they are all data frames, or they all are stored on the same
database.

\code{dm_get_con()} returns the \code{\link[DBI:DBIConnection-class]{DBI::DBIConnection}} for \code{dm} objects.
This works only if the tables are stored on a database, otherwise an error
is thrown.

\code{dm_get_tables()} returns a named list of \pkg{dplyr} \link{tbl} objects
of a \code{dm} object.
Filtering expressions are NOT evaluated at this stage.
To get a filtered table, use \code{dm_apply_filters_to_tbl()}, to apply filters to all tables use \code{dm_apply_filters()}

\code{dm_get_filter()} returns the filter expressions that have been applied to a \code{dm} object.
These filter expressions are not intended for evaluation, only for
information.

\code{is_dm()} returns \code{TRUE} if the input is of class \code{dm}.

\code{as_dm()} coerces objects to the \code{dm} class
}
\examples{
library(dplyr)
dm(iris, mtcars)
dm_from_src(dplyr::src_df(pkg = "nycflights13"))
new_dm(list(iris = iris, mtcars = mtcars))
as_dm(list(iris = iris, mtcars = mtcars))

dm_nycflights13() \%>\% tbl("airports")
dm_nycflights13() \%>\% src_tbls()
dm_nycflights13() \%>\% dm_get_src()
# this works only when tables of `dm` are on DB
if (FALSE) {
  dm_copy_to(dbplyr::src_memdb(), dm_nycflights13()) \%>\%
    dm_get_con()
}
dm_nycflights13() \%>\% dm_get_tables()
dm_nycflights13() \%>\% dm_get_filter()
dm_nycflights13() \%>\% validate_dm()
is_dm(dm_nycflights13())
dm_nycflights13()["airports"]
dm_nycflights13()[["airports"]]
dm_nycflights13()$airports
}
\seealso{
\itemize{
\item \code{\link[=dm_add_pk]{dm_add_pk()}} and \code{\link[=dm_add_fk]{dm_add_fk()}} add primary and foreign keys
\item \code{\link[=dm_copy_to]{dm_copy_to()}} and \code{\link[=dm_learn_from_db]{dm_learn_from_db()}} for DB interaction
\item \code{\link[=dm_draw]{dm_draw()}} for visualization
\item \code{\link[=dm_join_to_tbl]{dm_join_to_tbl()}} for flattening
\item \code{\link[=dm_filter]{dm_filter()}} for filtering
\item \code{\link[=dm_select_tbl]{dm_select_tbl()}} for creating a \code{dm} with only a subset of the tables
\item \code{\link[=dm_separate_tbl]{dm_separate_tbl()}} as one example of the normalization family
\item \code{\link[=check_key]{check_key()}} and \code{\link[=check_if_subset]{check_if_subset()}} for checking for key properties
\item \code{\link[=check_cardinality]{check_cardinality()}} for checking the cardinality of the relation between two tables
\item \code{\link[=dm_nycflights13]{dm_nycflights13()}}  for creating an example \code{dm} object
}
}
