% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dm.R
\name{dm}
\alias{dm}
\alias{new_dm}
\alias{validate_dm}
\alias{dm_get_src}
\alias{dm_get_con}
\alias{dm_get_tables}
\alias{dm_get_data_model}
\alias{dm_get_filter}
\alias{is_dm}
\alias{as_dm}
\title{Data model class}
\usage{
dm(src, data_model = NULL)

new_dm(tables, data_model)

validate_dm(x)

dm_get_src(x)

dm_get_con(x)

dm_get_tables(x)

dm_get_data_model(x)

dm_get_filter(x)

is_dm(x)

as_dm(x)
}
\arguments{
\item{src}{A \pkg{dplyr} table source object.}

\item{data_model}{A \pkg{datamodelr} data model object, or \code{NULL}.}

\item{tables}{A list of the tables (tibble-objects, not names) to be included in the \code{dm} object}

\item{x}{An object.}
}
\description{
The \code{dm} class wraps \link[dplyr:src]{dplyr::src} and adds a description of table relationships
based on \link[datamodelr:datamodelr-package]{datamodelr::datamodelr-package}.

\code{dm()} coerces its inputs. If called without arguments, an empty \code{dm} object is created.

\code{new_dm()} only checks if the inputs are of the correct class.
If called without arguments, an empty \code{dm} object is created.

\code{validate_dm()} checks consistency between the \pkg{dplyr} source
and the \pkg{datamodelr} based specification of table relationships.
This function is currently a no-op.

\code{dm_get_src()} returns the \pkg{dplyr} source component of a \code{dm}
object.

\code{dm_get_con()} returns the connection object (\code{con}-part of \pkg{dplyr} source component) of a \code{dm}
object.

\code{dm_get_tables()} returns a named list with \pkg{dplyr} \link{tbl} objects
of a \code{dm} object.
The filter expressions are NOT evaluated at this stage.
To get the filtered tables, use \code{tbl.dm()}

\code{dm_get_data_model()} returns the \pkg{datamodelr} data model component of a \code{dm}
object.

\code{dm_get_filter()} returns the filter component of a \code{dm}
object, the set filter expressions.

\code{is_dm()} returns \code{TRUE} if the input is of class \code{dm}.

\code{as_dm()} coerces objects to the \code{dm} class
}
\examples{
library(dplyr)
dm(dplyr::src_df(pkg = "nycflights13"))
as_dm(list(iris = iris, mtcars = mtcars))

dm_nycflights13() \%>\% tbl("airports")
dm_nycflights13() \%>\% src_tbls()
dm_nycflights13() \%>\% dm_get_src()
dm_nycflights13() \%>\% dm_get_tables()

dm_nycflights13() \%>\%
  dm_rename_tbl(ap = airports)
dm_nycflights13() \%>\%
  dm_rename_tbl(ap = airports, fl = flights)
}
\seealso{
\itemize{
\item \code{\link[=dm_add_pk]{dm_add_pk()}} and \code{\link[=dm_add_fk]{dm_add_fk()}} add primary and foreign keys
\item \code{\link[=dm_copy_to]{dm_copy_to()}} and \code{\link[=dm_learn_from_db]{dm_learn_from_db()}} for DB interaction
\item \code{\link[=dm_draw]{dm_draw()}} for visualization
\item \code{\link[=dm_join_to_tbl]{dm_join_to_tbl()}} for flattening
\item \code{\link[=dm_filter]{dm_filter()}} for filtering
\item \code{\link[=dm_select_tbl]{dm_select_tbl()}} for creating a \code{dm} with only a subset of the tables
\item \code{\link[=decompose_table]{decompose_table()}} as one example of the table surgery family
\item \code{\link[=check_key]{check_key()}} and \code{\link[=check_if_subset]{check_if_subset()}} for checking for key properties
\item \code{\link[=check_cardinality]{check_cardinality()}} for checking the cardinality of the relation between two tables
\item \code{\link[=dm_nycflights13]{dm_nycflights13()}}  for creating an example \code{dm} object
}
}
